{"version":3,"sources":["webpack:///./src/components/Tag/index.js","webpack:///./src/components/Card/index.js","webpack:///./src/templates/tag.js","webpack:///./src/components/SEO/index.js"],"names":["Tag","name","count","href","className","defaultProps","CardHeader","headerImage","color","url","image","backgroundColor","to","style","backgroundImage","publicURL","Card","title","date","headerBackgroundColor","description","categories","split","map","tag","key","TagPage","data","pageContext","edges","allStrapiArticle","console","log","margin","fontSize","length","node","id","siteTitleAlt","isPost","pageQuery","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","config","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-templates-tag-js-246d63f507fbb4187cce.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Tag = ({ name, count }) => (\r\n  <a href={`/tag/${name}`} className=\"header-tag\">\r\n    {name}\r\n    &nbsp;|&nbsp;\r\n    {count}\r\n  </a>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: \"\"\r\n};\r\n\r\nexport default Tag;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Tag from \"../Tag\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst imageStyle = (headerImage, color) => ({\r\n  backgroundColor: `#${color}`,\r\n  backgroundImage: ` url(${headerImage.publicURL})`\r\n});\r\n\r\nconst CardHeader = ({ url, image, backgroundColor }) => (\r\n  <Link to={url} href={url}>\r\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\r\n  </Link>\r\n);\r\n\r\nconst Card = ({\r\n  title,\r\n  date,\r\n  url,\r\n  headerImage,\r\n  headerBackgroundColor,\r\n  description,\r\n  categories = []\r\n}) => (\r\n  <div className=\"col-sm-12 pb-4\">\r\n    <div className=\"custom-card\">\r\n      {headerImage && (\r\n        <CardHeader\r\n          url={url}\r\n          image={headerImage}\r\n          backgroundColor={headerBackgroundColor}\r\n        />\r\n      )}\r\n      <div className=\"data\">\r\n        <div className=\"content\">\r\n          <div className=\"stats\">\r\n            <span className=\"date\">{date.split(\"T\")[0]}</span>\r\n            {categories.map(tag => (\r\n              <Tag name={tag.name} key={tag.name} />\r\n            ))}\r\n          </div>\r\n          <Link to={url} href={url}>\r\n            <h4 className=\"title\">{title}</h4>\r\n          </Link>\r\n          <p>{description}</p>\r\n          <Link to={url} href={url}>\r\n            More...\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  date: PropTypes.string,\r\n  url: PropTypes.string.isRequired,\r\n  headerImage: PropTypes.object,\r\n  headerBackgroundColor: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  categories: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n\r\nCard.defaultProps = {\r\n  headerImage: {},\r\n  categories: [],\r\n  date: \"\",\r\n  headerBackgroundColor: \"\"\r\n};\r\n\r\nCardHeader.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string,\r\n  image: PropTypes.string\r\n};\r\n\r\nCardHeader.defaultProps = {\r\n  backgroundColor: \"\",\r\n  image: \"\"\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Card from \"../components/Card\";\r\nimport SEO from \"../components/SEO\";\r\nimport Sidebar from \"../components/Sidebar\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TagPage = ({ data, pageContext }) => {\r\n  const { edges } = data.allStrapiArticle;\r\n  const { tag } = pageContext;\r\n  console.log(edges);\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          margin: 15\r\n        }}\r\n      >\r\n        <Sidebar />\r\n\r\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\r\n          <div\r\n            className=\"col-12\"\r\n            style={{\r\n              fontSize: 20,\r\n              margin: 15\r\n            }}\r\n          >\r\n            {edges.length}\r\n            &nbsp;Articles in&nbsp;\r\n            {tag}\r\n          </div>\r\n          {edges.map(({ node }) => (\r\n            <Card {...node} key={node.id} />\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\r\n      </div>\r\n\r\n      <SEO\r\n        title={tag}\r\n        url={`/tag/${tag}`}\r\n        siteTitleAlt=\"HellCatVN's Blog\"\r\n        isPost={false}\r\n        description={tag}\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query tagQuery ($tag: [String!]){\r\n    allStrapiArticle(\r\n      sort: {order: DESC, fields: date},\r\n      filter: {\r\n        categories: {\r\n          elemMatch: {\r\n            name: {\r\n              in: $tag\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          slug\r\n          title\r\n          date\r\n          categories {\r\n            name\r\n          }\r\n          headerImage {\r\n            publicURL\r\n          }\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport config from \"../../../data\";\r\n\r\nconst schemaOrgJSONLD = ({\r\n  url,\r\n  title,\r\n  siteTitleAlt,\r\n  isPost,\r\n  image,\r\n  description\r\n}) => [\r\n  {\r\n    \"@context\": \"http://schema.org\",\r\n    \"@type\": \"WebSite\",\r\n    url,\r\n    name: title,\r\n    alternateName: siteTitleAlt || \"\"\r\n  },\r\n  isPost\r\n    ? {\r\n      \"@context\": \"http://schema.org\",\r\n      \"@type\": \"BreadcrumbList\",\r\n      itemListElement: [\r\n        {\r\n          \"@type\": \"ListItem\",\r\n          position: 1,\r\n          item: {\r\n            \"@id\": url,\r\n            name: title,\r\n            image\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    : \"\",\r\n  isPost\r\n    ? {\r\n      \"@context\": \"http://schema.org\",\r\n      \"@type\": \"BlogPosting\",\r\n      url,\r\n      name: title,\r\n      alternateName: siteTitleAlt || \"\",\r\n      headline: title,\r\n      image: {\r\n        \"@type\": \"ImageObject\",\r\n        url: image\r\n      },\r\n      description\r\n    }\r\n    : \"\"\r\n];\r\n\r\nconst SEO = ({\r\n  url, title, description, image, siteTitleAlt, isPost\r\n}) => (\r\n  <Helmet>\r\n    <title>{title}</title>\r\n\r\n    {/* General tags */}\r\n    <meta name=\"description\" content={description} />\r\n    <meta name=\"image\" content={image} />\r\n\r\n    {/* Schema.org tags */}\r\n    <script type=\"application/ld+json\">\r\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\r\n    </script>\r\n\r\n    {/* OpenGraph tags */}\r\n    <meta property=\"og:url\" content={url} />\r\n    {isPost ? (\r\n      <meta property=\"og:type\" content=\"article\" />\r\n    ) : (\r\n      <meta property=\"og:type\" content=\"website\" />\r\n    )}\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={description} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta\r\n      property=\"fb:app_id\"\r\n      content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n    />\r\n\r\n    {/* Twitter Card tags */}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta\r\n      name=\"twitter:creator\"\r\n      content={config.twitter_username ? config.twitter_username : \"\"}\r\n    />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={description} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n  </Helmet>\r\n);\r\n\r\nSEO.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  siteTitleAlt: PropTypes.string.isRequired,\r\n  isPost: PropTypes.bool.isRequired\r\n};\r\n\r\nSEO.defaultProps = {\r\n  title: config.title\r\n};\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}