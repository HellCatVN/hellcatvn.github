{"version":3,"sources":["webpack:///./src/components/Tag/index.js","webpack:///./src/pages/tags.js","webpack:///./src/components/SEO/index.js"],"names":["Tag","name","count","href","className","defaultProps","TagPage","allStrapiArticle","data","mapping","console","log","edges","forEach","node","categories","tag","tags","Array","from","Object","keys","sort","b","a","style","margin","map","item","key","title","url","siteTitleAlt","isPost","description","image","pageQuery","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","headline","schemaOrgJSONLD","property","config","siteFBAppID","twitter_username"],"mappings":"8HAGMA,EAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACV,uBAAGC,KAAI,QAAUF,EAAQG,UAAU,cAChCH,EADH,MAGGC,IASLF,EAAIK,aAAe,CACjBH,MAAO,IAGMF,O,gOCoCAM,UAhDC,SAAC,GAAc,IACrBC,EADoB,EAAXC,KACTD,iBAEFE,EAAU,GAChBC,QAAQC,IAAIJ,GACZA,EAAiBK,MAAMC,SAAQ,YAAc,EAAXC,KAC3BC,WAAWF,SAAQ,SAACG,GAAS,IACxBf,EAASe,EAATf,KACJQ,EAAQR,GACVQ,EAAQR,IAAS,EAEjBQ,EAAQR,GAAQ,QAKtB,IAAMgB,EAAOC,MAAMC,KAAKC,OAAOC,KAAKZ,IAAUa,MAC5C,SAACC,EAAGC,GAAJ,OAAUf,EAAQe,GAAKf,EAAQc,MAGjC,OACE,yBAAKnB,UAAU,aACb,yBACEA,UAAU,MACVqB,MAAO,CACLC,OAAQ,KAGV,kBAAC,IAAD,MAEA,yBAAKtB,UAAU,eACZa,EAAKU,KAAI,SAAAC,GAAI,OACZ,kBAAC,IAAD,CAAK3B,KAAM2B,EAAMC,IAAKD,EAAM1B,MAAOO,EAAQmB,UAIjD,kBAAC,IAAD,CACEE,MAAM,OACNC,IAAI,SACJC,aAAa,mBACbC,QAAQ,EACRC,YAAY,YACZC,MAAM,sCAQP,IAAMC,EAAS,c,kCC1DtB,mEAwDMC,EAAM,SAAC,GAAD,IACVN,EADU,EACVA,IAAKD,EADK,EACLA,MAAOI,EADF,EACEA,YAAaC,EADf,EACeA,MAAqBF,GADpC,EACsBD,aADtB,EACoCC,QADpC,OAGV,kBAAC,IAAD,KACE,+BAAQH,GAGR,0BAAM7B,KAAK,cAAcqC,QAASJ,IAClC,0BAAMjC,KAAK,QAAQqC,QAASH,IAG5B,4BAAQI,KAAK,uBACVC,KAAKC,UA7DY,SAAC,GAAD,IACtBV,EADsB,EACtBA,IACAD,EAFsB,EAEtBA,MACAE,EAHsB,EAGtBA,aACAC,EAJsB,EAItBA,OACAE,EALsB,EAKtBA,MACAD,EANsB,EAMtBA,YANsB,MAOlB,CACJ,CACE,WAAY,oBACZ,QAAS,UACTH,MACA9B,KAAM6B,EACNY,cAAeV,GAAgB,IAEjCC,EACI,CACA,WAAY,oBACZ,QAAS,iBACTU,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVhB,KAAM,CACJ,MAAOG,EACP9B,KAAM6B,EACNK,YAKN,GACJF,EACI,CACA,WAAY,oBACZ,QAAS,cACTF,MACA9B,KAAM6B,EACNY,cAAeV,GAAgB,GAC/Ba,SAAUf,EACVK,MAAO,CACL,QAAS,cACTJ,IAAKI,GAEPD,eAEA,IAegBY,CAAgBf,KAIlC,0BAAMgB,SAAS,SAAST,QAASP,IAChCE,EACC,0BAAMc,SAAS,UAAUT,QAAQ,YAEjC,0BAAMS,SAAS,UAAUT,QAAQ,YAEnC,0BAAMS,SAAS,WAAWT,QAASR,IACnC,0BAAMiB,SAAS,iBAAiBT,QAASJ,IACzC,0BAAMa,SAAS,WAAWT,QAASH,IACnC,0BACEY,SAAS,YACTT,QAASU,IAAOC,YAAcD,IAAOC,YAAc,KAIrD,0BAAMhD,KAAK,eAAeqC,QAAQ,wBAClC,0BACErC,KAAK,kBACLqC,QAASU,IAAOE,iBAAmBF,IAAOE,iBAAmB,KAE/D,0BAAMjD,KAAK,gBAAgBqC,QAASR,IACpC,0BAAM7B,KAAK,sBAAsBqC,QAASJ,IAC1C,0BAAMjC,KAAK,gBAAgBqC,QAASH,MAaxCE,EAAIhC,aAAe,CACjByB,MAAOkB,IAAOlB,OAGDO","file":"component---src-pages-tags-js-d5ff70ed1cae596d5cc0.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Tag = ({ name, count }) => (\r\n  <a href={`/tag/${name}`} className=\"header-tag\">\r\n    {name}\r\n    &nbsp;|&nbsp;\r\n    {count}\r\n  </a>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: \"\"\r\n};\r\n\r\nexport default Tag;\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport Tag from \"../components/Tag\";\r\nimport SEO from \"../components/SEO\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TagPage = ({ data }) => {\r\n  const { allStrapiArticle } = data;\r\n\r\n  const mapping = {};\r\n  console.log(allStrapiArticle);\r\n  allStrapiArticle.edges.forEach(({ node }) => {\r\n    node.categories.forEach((tag) => {\r\n      const { name } = tag;\r\n      if (mapping[name]) {\r\n        mapping[name] += 1;\r\n      } else {\r\n        mapping[name] = 1;\r\n      }\r\n    });\r\n  });\r\n\r\n  const tags = Array.from(Object.keys(mapping)).sort(\r\n    (b, a) => mapping[a] - mapping[b],\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          margin: 15\r\n        }}\r\n      >\r\n        <Sidebar />\r\n\r\n        <div className=\"col order-2\">\r\n          {tags.map(item => (\r\n            <Tag name={item} key={item} count={mapping[item]} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <SEO\r\n        title=\"Tags\"\r\n        url=\"/tags/\"\r\n        siteTitleAlt=\"HellCatVN's Blog\"\r\n        isPost={false}\r\n        description=\"Tags Page\"\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query getAllTags {\r\n    allStrapiArticle {\r\n      edges {\r\n        node {\r\n          categories {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport config from \"../../../data\";\r\n\r\nconst schemaOrgJSONLD = ({\r\n  url,\r\n  title,\r\n  siteTitleAlt,\r\n  isPost,\r\n  image,\r\n  description\r\n}) => [\r\n  {\r\n    \"@context\": \"http://schema.org\",\r\n    \"@type\": \"WebSite\",\r\n    url,\r\n    name: title,\r\n    alternateName: siteTitleAlt || \"\"\r\n  },\r\n  isPost\r\n    ? {\r\n      \"@context\": \"http://schema.org\",\r\n      \"@type\": \"BreadcrumbList\",\r\n      itemListElement: [\r\n        {\r\n          \"@type\": \"ListItem\",\r\n          position: 1,\r\n          item: {\r\n            \"@id\": url,\r\n            name: title,\r\n            image\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    : \"\",\r\n  isPost\r\n    ? {\r\n      \"@context\": \"http://schema.org\",\r\n      \"@type\": \"BlogPosting\",\r\n      url,\r\n      name: title,\r\n      alternateName: siteTitleAlt || \"\",\r\n      headline: title,\r\n      image: {\r\n        \"@type\": \"ImageObject\",\r\n        url: image\r\n      },\r\n      description\r\n    }\r\n    : \"\"\r\n];\r\n\r\nconst SEO = ({\r\n  url, title, description, image, siteTitleAlt, isPost\r\n}) => (\r\n  <Helmet>\r\n    <title>{title}</title>\r\n\r\n    {/* General tags */}\r\n    <meta name=\"description\" content={description} />\r\n    <meta name=\"image\" content={image} />\r\n\r\n    {/* Schema.org tags */}\r\n    <script type=\"application/ld+json\">\r\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\r\n    </script>\r\n\r\n    {/* OpenGraph tags */}\r\n    <meta property=\"og:url\" content={url} />\r\n    {isPost ? (\r\n      <meta property=\"og:type\" content=\"article\" />\r\n    ) : (\r\n      <meta property=\"og:type\" content=\"website\" />\r\n    )}\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={description} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta\r\n      property=\"fb:app_id\"\r\n      content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n    />\r\n\r\n    {/* Twitter Card tags */}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta\r\n      name=\"twitter:creator\"\r\n      content={config.twitter_username ? config.twitter_username : \"\"}\r\n    />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={description} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n  </Helmet>\r\n);\r\n\r\nSEO.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  siteTitleAlt: PropTypes.string.isRequired,\r\n  isPost: PropTypes.bool.isRequired\r\n};\r\n\r\nSEO.defaultProps = {\r\n  title: config.title\r\n};\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}