{"version":3,"sources":["webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/components/Card/index.js","webpack:///./src/templates/tag.js","webpack:///./src/components/SEO/index.js"],"names":["config","wordings","githubUsername","email","iconUrl","about","facebook","name","Icon","href","icon","target","rel","className","Sidebar","to","src","alt","defaultProps","totalCount","latestPosts","query","render","data","all","limited","Tag","count","CardHeader","headerImage","color","url","image","backgroundColor","style","backgroundImage","Card","title","date","headerBackgroundColor","description","tags","split","map","key","TagPage","pageContext","edges","allMarkdownRemark","tag","margin","fontSize","length","node","frontmatter","id","siteTitleAlt","isPost","pageQuery","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-templates-tag-js-de85c94df298f94bee8f.js","sourcesContent":["import React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { config } from \"../../../data\";\r\n\r\n// import Information from \"./Information\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst {\r\n  wordings = [],\r\n  githubUsername,\r\n  email,\r\n  iconUrl,\r\n  about,\r\n  facebook,\r\n  name\r\n} = config;\r\n\r\nconst Icon = ({ href, icon }) => (\r\n  <a\r\n    target=\"_blank\"\r\n    href={href}\r\n    rel=\"external nofollow noopener noreferrer\"\r\n    className=\"custom-icon\"\r\n  >\r\n    <span className=\"fa-layers fa-fw fa-2x\">\r\n      <FontAwesomeIcon icon={icon} />\r\n    </span>\r\n  </a>\r\n);\r\n\r\n// const Sidebar = ({ totalCount, latestPosts }) => (\r\nconst Sidebar = () => (\r\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\r\n    <div className=\"about-me\">\r\n      <Link to={about} href={about} className=\"name\">\r\n        <img className=\"avatar\" src={iconUrl} alt={name} />\r\n        <h4>{name}</h4>\r\n      </Link>\r\n      <p className=\"mb-1\">{wordings[0]}</p>\r\n      <p className=\"mb-3\">{wordings[1]}</p>\r\n      <Icon\r\n        href={`https://github.com/${githubUsername}`}\r\n        icon={[\"fab\", \"github\"]}\r\n      />\r\n      <Icon href={`mailto:${email}`} icon={[\"far\", \"envelope\"]} />\r\n      {facebook && (\r\n        <Icon\r\n          href={`https://www.facebook.com/${facebook}/`}\r\n          icon={[\"fab\", \"facebook\"]}\r\n        />\r\n      )}\r\n      {/* <Information totalCount={totalCount} posts={latestPosts} /> */}\r\n    </div>\r\n  </header>\r\n);\r\n\r\nIcon.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nSidebar.propTypes = {\r\n  totalCount: PropTypes.number, //eslint-disable-line\r\n  latestPosts: PropTypes.array //eslint-disable-line\r\n};\r\n\r\nSidebar.defaultProps = {\r\n  totalCount: 0,\r\n  latestPosts: []\r\n};\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      fragment cardData on MarkdownRemark {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          id\r\n          title\r\n          url: slug\r\n          date\r\n          tags\r\n          description\r\n          headerImage\r\n        }\r\n      }\r\n\r\n      query SidebarQuery {\r\n        all: allMarkdownRemark {\r\n          totalCount\r\n        }\r\n\r\n        limited: allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date] }\r\n          limit: 6\r\n        ) {\r\n          latestPosts: edges {\r\n            node {\r\n              ...cardData\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => <Sidebar {...data.all} {...data.limited} />}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Tag = ({ name, count }) => (\r\n  <a href={`/tag/${name}`} className=\"header-tag\">\r\n    {name}\r\n    &nbsp;|&nbsp;\r\n    {count}\r\n  </a>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: \"\"\r\n};\r\n\r\nexport default Tag;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Tag from \"../Tag\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst imageStyle = (headerImage, color) => ({\r\n  backgroundColor: `#${color}`,\r\n  backgroundImage: ` url(${headerImage})`\r\n});\r\n\r\nconst CardHeader = ({ url, image, backgroundColor }) => (\r\n  <Link to={url} href={url}>\r\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\r\n  </Link>\r\n);\r\n\r\nconst Card = ({\r\n  title,\r\n  date,\r\n  url,\r\n  headerImage,\r\n  headerBackgroundColor,\r\n  description,\r\n  tags = []\r\n}) => (\r\n  <div className=\"col-sm-12 pb-4\">\r\n    <div className=\"custom-card\">\r\n      {headerImage && (\r\n        <CardHeader\r\n          url={url}\r\n          image={headerImage}\r\n          backgroundColor={headerBackgroundColor}\r\n        />\r\n      )}\r\n      <div className=\"data\">\r\n        <div className=\"content\">\r\n          <div className=\"stats\">\r\n            <span className=\"date\">{date.split(\"T\")[0]}</span>\r\n            {tags.map(name => (\r\n              <Tag name={name} key={name} />\r\n            ))}\r\n          </div>\r\n          <Link to={url} href={url}>\r\n            <h4 className=\"title\">{title}</h4>\r\n          </Link>\r\n          <p>{description}</p>\r\n          <Link to={url} href={url}>\r\n            More...\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  date: PropTypes.string,\r\n  url: PropTypes.string.isRequired,\r\n  headerImage: PropTypes.string,\r\n  headerBackgroundColor: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  tags: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n\r\nCard.defaultProps = {\r\n  headerImage: \"\",\r\n  tags: [],\r\n  date: \"\",\r\n  headerBackgroundColor: \"\"\r\n};\r\n\r\nCardHeader.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string,\r\n  image: PropTypes.string\r\n};\r\n\r\nCardHeader.defaultProps = {\r\n  backgroundColor: \"\",\r\n  image: \"\"\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Card from \"../components/Card\";\r\nimport SEO from \"../components/SEO\";\r\nimport Sidebar from \"../components/Sidebar\";\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TagPage = ({ data, pageContext }) => {\r\n  const { edges } = data.allMarkdownRemark;\r\n  const { tag } = pageContext;\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          margin: 15\r\n        }}\r\n      >\r\n        <Sidebar />\r\n\r\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\r\n          <div\r\n            className=\"col-12\"\r\n            style={{\r\n              fontSize: 20,\r\n              margin: 15\r\n            }}\r\n          >\r\n            {edges.length}\r\n            &nbsp;Articles in&nbsp;\r\n            {tag}\r\n          </div>\r\n          {edges.map(({ node }) => (\r\n            <Card {...node.frontmatter} key={node.id} />\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\r\n      </div>\r\n\r\n      <SEO\r\n        title={tag}\r\n        url={`/tag/${tag}`}\r\n        siteTitleAlt=\"Calpa's Blog\"\r\n        isPost={false}\r\n        description={tag}\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query tagQuery($tag: [String!]) {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n      filter: { frontmatter: { tags: { in: $tag } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            id\r\n            url: slug\r\n            title\r\n            date\r\n            tags\r\n            headerImage\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport config from \"../../../data\";\r\n\r\nconst schemaOrgJSONLD = ({\r\n  url,\r\n  title,\r\n  siteTitleAlt,\r\n  isPost,\r\n  image,\r\n  description\r\n}) => [\r\n  {\r\n    \"@context\": \"http://schema.org\",\r\n    \"@type\": \"WebSite\",\r\n    url,\r\n    name: title,\r\n    alternateName: siteTitleAlt || \"\"\r\n  },\r\n  isPost\r\n    ? {\r\n      \"@context\": \"http://schema.org\",\r\n      \"@type\": \"BreadcrumbList\",\r\n      itemListElement: [\r\n        {\r\n          \"@type\": \"ListItem\",\r\n          position: 1,\r\n          item: {\r\n            \"@id\": url,\r\n            name: title,\r\n            image\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    : \"\",\r\n  isPost\r\n    ? {\r\n      \"@context\": \"http://schema.org\",\r\n      \"@type\": \"BlogPosting\",\r\n      url,\r\n      name: title,\r\n      alternateName: siteTitleAlt || \"\",\r\n      headline: title,\r\n      image: {\r\n        \"@type\": \"ImageObject\",\r\n        url: image\r\n      },\r\n      description\r\n    }\r\n    : \"\"\r\n];\r\n\r\nconst SEO = ({\r\n  url, title, description, image, siteTitleAlt, isPost\r\n}) => (\r\n  <Helmet>\r\n    <title>{title}</title>\r\n\r\n    {/* General tags */}\r\n    <meta name=\"description\" content={description} />\r\n    <meta name=\"image\" content={image} />\r\n\r\n    {/* Schema.org tags */}\r\n    <script type=\"application/ld+json\">\r\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\r\n    </script>\r\n\r\n    {/* OpenGraph tags */}\r\n    <meta property=\"og:url\" content={url} />\r\n    {isPost ? (\r\n      <meta property=\"og:type\" content=\"article\" />\r\n    ) : (\r\n      <meta property=\"og:type\" content=\"website\" />\r\n    )}\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={description} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta\r\n      property=\"fb:app_id\"\r\n      content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n    />\r\n\r\n    {/* Twitter Card tags */}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta\r\n      name=\"twitter:creator\"\r\n      content={config.twitter_username ? config.twitter_username : \"\"}\r\n    />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={description} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n  </Helmet>\r\n);\r\n\r\nSEO.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  siteTitleAlt: PropTypes.string.isRequired,\r\n  isPost: PropTypes.bool.isRequired\r\n};\r\n\r\nSEO.defaultProps = {\r\n  title: config.title\r\n};\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}