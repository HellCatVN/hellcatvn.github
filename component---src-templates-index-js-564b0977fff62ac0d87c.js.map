{"version":3,"sources":["webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/templates/index.js","webpack:///./src/components/Card/index.js"],"names":["config","wordings","githubUsername","email","iconUrl","about","facebook","name","Icon","href","icon","target","rel","className","Sidebar","to","src","alt","defaultProps","totalCount","latestPosts","query","render","data","all","limited","Tag","count","NavLinkText","color","text","style","NavLink","test","url","Page","pageContext","group","index","first","last","pathPrefix","previousUrl","nextUrl","Fragment","marginTop","map","node","frontmatter","slug","fields","key","justifyContent","marginBottom","CardHeader","headerImage","image","backgroundColor","backgroundImage","Card","title","date","headerBackgroundColor","description","tags","split"],"mappings":"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","file":"component---src-templates-index-js-564b0977fff62ac0d87c.js","sourcesContent":["import React from \"react\";\r\nimport { Link, StaticQuery, graphql } from \"gatsby\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { config } from \"../../../data\";\r\n\r\n// import Information from \"./Information\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst {\r\n  wordings = [],\r\n  githubUsername,\r\n  email,\r\n  iconUrl,\r\n  about,\r\n  facebook,\r\n  name\r\n} = config;\r\n\r\nconst Icon = ({ href, icon }) => (\r\n  <a\r\n    target=\"_blank\"\r\n    href={href}\r\n    rel=\"external nofollow noopener noreferrer\"\r\n    className=\"custom-icon\"\r\n  >\r\n    <span className=\"fa-layers fa-fw fa-2x\">\r\n      <FontAwesomeIcon icon={icon} />\r\n    </span>\r\n  </a>\r\n);\r\n\r\n// const Sidebar = ({ totalCount, latestPosts }) => (\r\nconst Sidebar = () => (\r\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\r\n    <div className=\"about-me\">\r\n      <Link to={about} href={about} className=\"name\">\r\n        <img className=\"avatar\" src={iconUrl} alt={name} />\r\n        <h4>{name}</h4>\r\n      </Link>\r\n      <p className=\"mb-1\">{wordings[0]}</p>\r\n      <p className=\"mb-3\">{wordings[1]}</p>\r\n      <Icon\r\n        href={`https://github.com/${githubUsername}`}\r\n        icon={[\"fab\", \"github\"]}\r\n      />\r\n      <Icon href={`mailto:${email}`} icon={[\"far\", \"envelope\"]} />\r\n      {facebook && (\r\n        <Icon\r\n          href={`https://www.facebook.com/${facebook}/`}\r\n          icon={[\"fab\", \"facebook\"]}\r\n        />\r\n      )}\r\n      {/* <Information totalCount={totalCount} posts={latestPosts} /> */}\r\n    </div>\r\n  </header>\r\n);\r\n\r\nIcon.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nSidebar.propTypes = {\r\n  totalCount: PropTypes.number, //eslint-disable-line\r\n  latestPosts: PropTypes.array //eslint-disable-line\r\n};\r\n\r\nSidebar.defaultProps = {\r\n  totalCount: 0,\r\n  latestPosts: []\r\n};\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      fragment cardData on MarkdownRemark {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          id\r\n          title\r\n          url: slug\r\n          date\r\n          tags\r\n          description\r\n          headerImage\r\n        }\r\n      }\r\n\r\n      query SidebarQuery {\r\n        all: allMarkdownRemark {\r\n          totalCount\r\n        }\r\n\r\n        limited: allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date] }\r\n          limit: 6\r\n        ) {\r\n          latestPosts: edges {\r\n            node {\r\n              ...cardData\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => <Sidebar {...data.all} {...data.limited} />}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Tag = ({ name, count }) => (\r\n  <a href={`/tag/${name}`} className=\"header-tag\">\r\n    {name}\r\n    &nbsp;|&nbsp;\r\n    {count}\r\n  </a>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: \"\"\r\n};\r\n\r\nexport default Tag;\r\n","/* eslint react/prop-types: 0 */\r\nimport React from \"react\";\r\nimport Link from \"gatsby-link\";\r\n\r\nimport Card from \"../components/Card\";\r\nimport Sidebar from \"../components/Sidebar\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst NavLinkText = ({ color, text }) => (\r\n  <div\r\n    className=\"navlink\"\r\n    style={{\r\n      color\r\n    }}\r\n  >\r\n    {text}\r\n  </div>\r\n);\r\n\r\nconst NavLink = ({ test, url, text }) => {\r\n  if (!test) {\r\n    return <NavLinkText color=\"#7d7d7d\" text={text} />;\r\n  }\r\n\r\n  return (\r\n    <Link to={`${url}`}>\r\n      <NavLinkText color=\"#66ccff\" text={text} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nconst Page = ({ pageContext }) => {\r\n  const {\r\n    group, index, first, last, pathPrefix\r\n  } = pageContext;\r\n\r\n  const previousUrl = index - 1 === 1 ? \"\" : `/${pathPrefix}/${index - 1}`;\r\n  const nextUrl = `/${pathPrefix}/${index + 1}`;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        className=\"row homepage\"\r\n        style={{\r\n          marginTop: 20\r\n        }}\r\n      >\r\n        <Sidebar />\r\n        <div className=\"col-xl-6 col-lg-7 col-md-12 col-xs-12 order-2\">\r\n          {group.map(({ node }) => (\r\n            <Card\r\n              {...node.frontmatter}\r\n              url={\r\n                node.frontmatter.slug ? node.frontmatter.slug : node.fields.slug\r\n              }\r\n              key={node.fields.slug}\r\n            />\r\n          ))}\r\n\r\n          <div\r\n            className=\"row\"\r\n            style={{\r\n              justifyContent: \"space-around\",\r\n              marginBottom: \"20px\"\r\n            }}\r\n          >\r\n            <div className=\"previousLink\">\r\n              <NavLink test={!first} url={previousUrl} text=\"Previous\" />\r\n            </div>\r\n            <div className=\"nextLink\">\r\n              <NavLink test={!last} url={nextUrl} text=\"Next\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Tag from \"../Tag\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst imageStyle = (headerImage, color) => ({\r\n  backgroundColor: `#${color}`,\r\n  backgroundImage: ` url(${headerImage})`\r\n});\r\n\r\nconst CardHeader = ({ url, image, backgroundColor }) => (\r\n  <Link to={url} href={url}>\r\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\r\n  </Link>\r\n);\r\n\r\nconst Card = ({\r\n  title,\r\n  date,\r\n  url,\r\n  headerImage,\r\n  headerBackgroundColor,\r\n  description,\r\n  tags = []\r\n}) => (\r\n  <div className=\"col-sm-12 pb-4\">\r\n    <div className=\"custom-card\">\r\n      {headerImage && (\r\n        <CardHeader\r\n          url={url}\r\n          image={headerImage}\r\n          backgroundColor={headerBackgroundColor}\r\n        />\r\n      )}\r\n      <div className=\"data\">\r\n        <div className=\"content\">\r\n          <div className=\"stats\">\r\n            <span className=\"date\">{date.split(\"T\")[0]}</span>\r\n            {tags.map(name => (\r\n              <Tag name={name} key={name} />\r\n            ))}\r\n          </div>\r\n          <Link to={url} href={url}>\r\n            <h4 className=\"title\">{title}</h4>\r\n          </Link>\r\n          <p>{description}</p>\r\n          <Link to={url} href={url}>\r\n            More...\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  date: PropTypes.string,\r\n  url: PropTypes.string.isRequired,\r\n  headerImage: PropTypes.string,\r\n  headerBackgroundColor: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  tags: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n\r\nCard.defaultProps = {\r\n  headerImage: \"\",\r\n  tags: [],\r\n  date: \"\",\r\n  headerBackgroundColor: \"\"\r\n};\r\n\r\nCardHeader.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  backgroundColor: PropTypes.string,\r\n  image: PropTypes.string\r\n};\r\n\r\nCardHeader.defaultProps = {\r\n  backgroundColor: \"\",\r\n  image: \"\"\r\n};\r\n\r\nexport default Card;\r\n"],"sourceRoot":""}